basePath: /api
definitions:
  go-jwt-auth_internal_rest-api_dto.CommonResponseDTO:
    properties:
      message:
        type: string
    type: object
  go-jwt-auth_internal_rest-api_dto.ConfigDTO:
    properties:
      accessTokenTTLsec:
        type: integer
      refreshTokenTTLsec:
        type: integer
    type: object
  go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO:
    properties:
      code:
        type: string
      error:
        type: string
      kind:
        type: string
    type: object
  go-jwt-auth_internal_rest-api_dto.LoginDTO:
    properties:
      email:
        type: string
      fingerPrint:
        type: string
      password:
        type: string
    required:
    - email
    - fingerPrint
    - password
    type: object
  go-jwt-auth_internal_rest-api_dto.LoginResponseDTO:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.UserDTO'
    type: object
  go-jwt-auth_internal_rest-api_dto.LoginWithOAuthDTO:
    properties:
      code:
        type: string
      fingerPrint:
        type: string
      redirectURL:
        type: string
    required:
    - code
    - fingerPrint
    - redirectURL
    type: object
  go-jwt-auth_internal_rest-api_dto.OAuthRedirectDTO:
    properties:
      redirectURL:
        type: string
    type: object
  go-jwt-auth_internal_rest-api_dto.RefreshTokensDTO:
    properties:
      fingerPrint:
        type: string
    required:
    - fingerPrint
    type: object
  go-jwt-auth_internal_rest-api_dto.RefreshTokensResponseDTO:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  go-jwt-auth_internal_rest-api_dto.RegisterDTO:
    properties:
      email:
        type: string
      fingerPrint:
        type: string
      password:
        type: string
      password2:
        type: string
    required:
    - email
    - fingerPrint
    - password
    - password2
    type: object
  go-jwt-auth_internal_rest-api_dto.RegisterResponseDTO:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.UserDTO'
    type: object
  go-jwt-auth_internal_rest-api_dto.RegisterWithOAuthDTO:
    properties:
      code:
        type: string
      fingerPrint:
        type: string
      redirectURL:
        type: string
    required:
    - code
    - fingerPrint
    - redirectURL
    type: object
  go-jwt-auth_internal_rest-api_dto.SessionDTO:
    properties:
      createdAt:
        type: string
      ip:
        type: string
      updatedAt:
        type: string
      userAgent:
        type: string
    type: object
  go-jwt-auth_internal_rest-api_dto.SessionsDTO:
    properties:
      sessions:
        items:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.SessionDTO'
        type: array
    type: object
  go-jwt-auth_internal_rest-api_dto.UserDTO:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: marsel.ave@gmail.com
    name: Marsel Abazbekov
    url: https://github.com/GravityTwoG
  description: Go JWT Auth API example
  title: Go JWT Auth API
  version: "1.0"
paths:
  /auth/{provider}/consent:
    get:
      description: Logins user, also sets refresh token in cookie
      parameters:
      - description: redirectURL
        in: query
        name: redirectURL
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.OAuthRedirectDTO'
      summary: Request redirect URL for oauth provider consent screen
      tags:
      - Auth
  /auth/{provider}/login-callback:
    post:
      consumes:
      - application/json
      description: Logins user, also sets refresh token in cookie
      parameters:
      - description: LoginWithOAuthDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.LoginWithOAuthDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.LoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
      summary: Login user with oauth provider
      tags:
      - Auth
  /auth/{provider}/register-callback:
    post:
      consumes:
      - application/json
      parameters:
      - description: RegisterWithOAuthDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RegisterWithOAuthDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RegisterResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
      summary: Registers new user with oauth provider, also sets refresh token in
        cookie
      tags:
      - Auth
  /auth/active-sessions:
    get:
      description: Get active sessions (list of refresh tokens)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.SessionsDTO'
      security:
      - ApiKeyAuth: []
      summary: Get active sessions
      tags:
      - Auth
  /auth/config:
    get:
      description: Get TTL of tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ConfigDTO'
      summary: Get tokens config
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logins user, also sets refresh token in cookie
      parameters:
      - description: LoginDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.LoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.CommonResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/logout-all:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.CommonResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Logout all sessions
      tags:
      - Auth
  /auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.UserDTO'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - Auth
  /auth/refresh-tokens:
    post:
      consumes:
      - application/json
      description: Refreshes tokens, also sets new refresh token in cookie
      parameters:
      - description: RefreshTokensDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RefreshTokensDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RefreshTokensResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: RegisterDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.RegisterResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/go-jwt-auth_internal_rest-api_dto.ErrorResponseDTO'
      summary: Registers new user, also sets refresh token in cookie
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
